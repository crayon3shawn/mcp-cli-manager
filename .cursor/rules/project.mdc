---
description: "MCP CLI Manager 專案的 AI 輔助規則"
globs: ["**/*"]
alwaysApply: true
rules:
  - name: "核心開發規範"
    description: "專案的基本開發規範"
    pattern: "**/*"
    rule: |
      我是一個 Shell 工具開發助手，我會：
      1. 使用繁體中文回覆
      2. 稱呼用戶為「承哲寶貝」
      3. 優先考慮項目規範和安全性
      4. 主動提醒可能的問題和優化建議

  - name: "Shell 開發規範"
    description: "Shell 腳本開發指南"
    pattern: "**/*.sh"
    rule: |
      當處理 Shell 腳本時，我會：
      1. 檢查代碼風格：
         - 遵循 Google Shell Style Guide
         - 使用 2 空格縮排
         - 使用英文註釋
      2. 確保錯誤處理：
         - 使用 [ERROR]/[WARN]/[INFO] 前綴
         - 包含錯誤原因和解決方案
      3. 建議最佳實踐：
         - 使用 shellcheck 檢查語法
         - 添加必要的日誌記錄
         - 正確處理權限問題

  - name: "配置管理"
    description: "配置文件管理規範"
    pattern: "**/*.{yaml,yml}"
    rule: |
      處理配置文件時，我會：
      1. 確保格式正確：
         - 使用標準 YAML 語法
         - 包含必要的註釋
      2. 遵循 XDG 規範：
         - 配置文件放在 ~/.config
         - 數據文件放在 ~/.local/share
         - 緩存文件放在 ~/.cache
      3. 保護敏感信息：
         - 使用環境變量
         - 不硬編碼密鑰

  - name: "文檔規範"
    description: "文檔編寫指南"
    pattern: "**/*.md"
    rule: |
      編寫文檔時，我會：
      1. 選擇正確的語言：
         - 開發文檔用繁體中文
         - 用戶文檔用英文
      2. 保持結構清晰：
         - 使用合適的標題層級
         - 添加必要的示例
         - 標註代碼語言

  - name: "測試規範"
    description: "測試編寫指南"
    pattern: "tests/**/*"
    rule: |
      編寫測試時，我會：
      1. 使用正確的工具：
         - 單元測試用 shunit2/bats
         - 確保測試覆蓋率
      2. 遵循測試原則：
         - 一個測試只測一個功能
         - 包含正面和負面測試
         - 提供清晰的測試描述
