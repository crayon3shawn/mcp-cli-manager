#!/usr/bin/env node

/**
 * MCP CLI Manager Entry Point
 */

import { program } from 'commander';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { readFileSync } from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const pkg = JSON.parse(readFileSync(join(__dirname, '..', 'package.json'), 'utf8'));

import { searchServers, formatSearchResults } from '../lib/search.js';
import { registNpxServer, removeServer, getServerInfo, getRegisteredServers } from '../lib/regist.js';
import { getServersStatus, getServerStatus, formatStatusTable } from '../lib/status.js';
import { listServers } from '../lib/list.js';
import { syncCursorServers } from '../lib/sync.js';
import { runServer, stopServer, stopAllServers, getRunningServers } from '../lib/process.js';

// Setup program metadata
program
  .name('mcp-cli-manager')
  .description('MCP Server Management Tool')
  .version(pkg.version);

// List servers command
program
  .command('list')
  .description('List installed MCP servers')
  .action(async () => {
    try {
      const result = await listServers();
      console.log(result);
    } catch (error) {
      console.error('Error:', error.message);
      process.exit(1);
    }
  });

// Search servers command
program
  .command('search <query>')
  .description('Search available MCP servers')
  .action(async (query) => {
    try {
      const results = await searchServers(query);
      console.log(formatSearchResults(results));
    } catch (error) {
      console.error('Error:', error.message);
      process.exit(1);
    }
  });

// Register server command
program
  .command('regist <n>')
  .description('Register MCP server (name will be simplified)')
  .action(async (name) => {
    try {
      await registNpxServer(name);
    } catch (error) {
      console.error('Error:', error.message);
      process.exit(1);
    }
  });

// Remove server command
program
  .command('remove <n>')
  .description('Remove MCP server')
  .action(async (name) => {
    try {
      await removeServer(name);
    } catch (error) {
      console.error('Error:', error.message);
      process.exit(1);
    }
  });

// Status command
program
  .command('status [name]')
  .description('Show MCP server status')
  .action(async (name) => {
    try {
      let status;
      if (name) {
        status = [await getServerStatus(name)];
      } else {
        status = await getServersStatus();
      }
      console.log(formatStatusTable(status));
    } catch (error) {
      console.error('Error:', error.message);
      process.exit(1);
    }
  });

// Sync command
program
  .command('sync')
  .description('Sync Cursor server configuration')
  .action(async () => {
    try {
      await syncCursorServers();
      console.log('Successfully synced Cursor server configuration');
    } catch (error) {
      console.error('Error:', error.message);
      process.exit(1);
    }
  });

// Run servers command
program
  .command('run [names...]')
  .description('Run MCP servers (all servers if no names provided)')
  .action(async (names) => {
    try {
      const servers = await getRegisteredServers();
      const serversToRun = names.length > 0 
        ? servers.filter(s => names.includes(s.name))
        : servers;

      if (names.length > 0) {
        const notFound = names.filter(name => !servers.find(s => s.name === name));
        if (notFound.length > 0) {
          throw new Error(`Servers not found: ${notFound.join(', ')}`);
        }
      }

      for (const server of serversToRun) {
        await runServer(server);
      }
    } catch (error) {
      console.error('Error:', error.message);
      process.exit(1);
    }
  });

// Stop servers command
program
  .command('stop [names...]')
  .description('Stop MCP servers (all servers if no names provided)')
  .action(async (names) => {
    try {
      const runningServers = getRunningServers();
      const serversToStop = names.length > 0
        ? runningServers.filter(name => names.includes(name))
        : runningServers;

      if (names.length > 0) {
        const notFound = names.filter(name => !runningServers.includes(name));
        if (notFound.length > 0) {
          throw new Error(`Servers not running: ${notFound.join(', ')}`);
        }
      }

      for (const name of serversToStop) {
        await stopServer(name);
      }
    } catch (error) {
      console.error('Error:', error.message);
      process.exit(1);
    }
  });

// Parse command line arguments
program.parse(); 