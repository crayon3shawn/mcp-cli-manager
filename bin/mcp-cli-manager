#!/usr/bin/env node

/**
 * MCP CLI 管理器命令行入口
 */

import { program } from 'commander';
import inquirer from 'inquirer';
import chalk from 'chalk';
import Table from 'cli-table3';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { readFileSync } from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const pkg = JSON.parse(readFileSync(join(__dirname, '..', 'package.json'), 'utf8'));

import { searchServers, formatSearchResults } from '../lib/search.js';
import { registNpxServer, unregistServer, getServerInfo, getRegisteredServers } from '../lib/regist.js';
import { getServersStatus, getServerStatus, formatStatusTable } from '../lib/status.js';
import { listServers } from '../lib/list.js';
import { syncCursorServers } from '../lib/sync.js';

// 設置版本號和描述
program
  .name('mcp-cli-manager')
  .description('MCP 伺服器管理工具')
  .version(pkg.version);

// 列出伺服器命令
program
  .command('list')
  .description('列出已安裝的 MCP 伺服器')
  .action(async () => {
    try {
      const result = await listServers();
      console.log(result);
    } catch (error) {
      console.error('錯誤：', error.message);
      process.exit(1);
    }
  });

// 搜尋伺服器
program
  .command('search <query>')
  .description('搜尋可用的 MCP 伺服器')
  .action(async (query) => {
    try {
      const results = await searchServers(query);
      console.log(formatSearchResults(results));
    } catch (error) {
      console.error('錯誤：', error.message);
      process.exit(1);
    }
  });

// 註冊伺服器命令
program
  .command('regist <n>')
  .description('註冊 MCP 伺服器（將自動簡化名稱）')
  .action(async (name) => {
    try {
      await registNpxServer(name);
    } catch (error) {
      console.error('錯誤：', error.message);
      process.exit(1);
    }
  });

// 取消註冊伺服器命令
program
  .command('unregist <n>')
  .description('取消註冊 MCP 伺服器')
  .option('-f, --force', '強制取消註冊，不提示確認', false)
  .action(async (name, options) => {
    try {
      if (!options.force) {
        const { confirm } = await inquirer.prompt([{
          type: 'confirm',
          name: 'confirm',
          message: `確定要取消註冊伺服器 ${name} 嗎？`,
          default: false
        }]);
        
        if (!confirm) {
          console.log('已取消操作');
          return;
        }
      }
      
      await unregistServer(name);
      console.log(`成功取消註冊伺服器：${name}`);
    } catch (error) {
      console.error('錯誤：', error.message);
      process.exit(1);
    }
  });

// 狀態命令
program
  .command('status [name]')
  .description('顯示 MCP 伺服器的運行狀態')
  .action(async (name) => {
    try {
      let status;
      if (name) {
        status = [await getServerStatus(name)];
      } else {
        status = await getServersStatus();
      }
      console.log(formatStatusTable(status));
    } catch (error) {
      console.error('錯誤：', error.message);
      process.exit(1);
    }
  });

// 同步命令
program
  .command('sync')
  .description('同步 Cursor 伺服器配置')
  .action(async () => {
    try {
      await syncCursorServers();
      console.log('成功同步 Cursor 伺服器配置');
    } catch (error) {
      console.error('錯誤：', error.message);
      process.exit(1);
    }
  });

// 解析命令行參數
program.parse(); 