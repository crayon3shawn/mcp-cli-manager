#!/bin/zsh

# MCP 管理工具
MCP_DIR="${0:A:h}"
SERVERS_CONF="${HOME}/.config/mcp-manager/servers.conf"

# 顏色定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# 幫助信息
show_help() {
    cat << EOF
${BLUE}MCP 管理工具${NC}

用法: mcp <命令> [參數]

命令:
  ${GREEN}help${NC}             顯示此幫助信息
  ${GREEN}status${NC}           顯示所有服務器狀態
  ${GREEN}start [server]${NC}   啟動服務器（不指定則啟動所有）
  ${GREEN}stop [server]${NC}    停止服務器（不指定則停止所有）
  ${GREEN}restart [server]${NC} 重啟服務器（不指定則重啟所有）
  ${GREEN}logs [server]${NC}    查看服務器日誌
  ${GREEN}doctor${NC}           診斷環境問題
  ${GREEN}reload${NC}           重新載入配置

服務器:
  ${YELLOW}github${NC}          GitHub 整合服務器
  ${YELLOW}filesystem${NC}      文件系統服務器
  ${YELLOW}puppeteer${NC}       Puppeteer 自動化服務器
  ${YELLOW}sequential${NC}      順序思維服務器

示例:
  mcp start          # 啟動所有服務器
  mcp start github   # 只啟動 GitHub 服務器
  mcp status         # 檢查所有服務器狀態
  mcp stop           # 停止所有服務器
EOF
}

# 檢查服務器配置文件
check_config() {
    if [[ ! -f "$SERVERS_CONF" ]]; then
        echo "${RED}錯誤：找不到配置文件 $SERVERS_CONF${NC}"
        return 1
    fi
}

# 獲取服務器信息
get_server_info() {
    local server=$1
    local field=$2
    sed -n "/^\[$server\]/,/^\[/p" "$SERVERS_CONF" | grep "^$field=" | cut -d= -f2
}

# 列出所有服務器
list_servers() {
    grep '^\[.*\]$' "$SERVERS_CONF" | tr -d '[]'
}

# 檢查服務器狀態
check_server_status() {
    local server=$1
    local process=$(get_server_info "$server" "process")
    if pgrep -f "$process" > /dev/null; then
        echo "${GREEN}✅ $(get_server_info "$server" "description") 正在運行${NC}"
        return 0
    else
        echo "${RED}❌ $(get_server_info "$server" "description") 未運行${NC}"
        return 1
    fi
}

# 啟動服務器
start_server() {
    local server=$1
    local command=$(get_server_info "$server" "command")
    local description=$(get_server_info "$server" "description")
    
    echo "${BLUE}▶️ 啟動${description}...${NC}"
    eval "$command" &
    sleep 1
    check_server_status "$server"
}

# 停止服務器
stop_server() {
    local server=$1
    local process=$(get_server_info "$server" "process")
    local description=$(get_server_info "$server" "description")
    
    echo "${YELLOW}🛑 停止${description}...${NC}"
    if pkill -f "$process"; then
        echo "${GREEN}✅ ${description}已停止${NC}"
        return 0
    else
        echo "${RED}❌ ${description}停止失敗${NC}"
        return 1
    fi
}

# 檢查環境
check_environment() {
    echo "${BLUE}🔍 檢查 MCP 環境...${NC}"
    
    # 檢查 fnm
    if ! command -v fnm >/dev/null 2>&1; then
        echo "${RED}❌ 未安裝 fnm${NC}"
        return 1
    fi
    
    # 檢查 Node.js 版本
    local current_version=$(fnm current)
    if [[ "$current_version" != "mcp-servers" ]]; then
        echo "${YELLOW}⚠️ 當前不在 MCP 環境（當前：$current_version）${NC}"
        echo "${BLUE}🔄 切換到 MCP 環境...${NC}"
        if ! fnm use mcp-servers; then
            echo "${RED}❌ 切換到 MCP 環境失敗${NC}"
            return 1
        fi
    fi
    
    echo "${GREEN}✅ 環境檢查通過${NC}"
    return 0
}

# 主要命令處理
case "$1" in
    help|--help|-h)
        show_help
        ;;
    status)
        check_config || exit 1
        echo "${BLUE}🔍 檢查所有服務器狀態...${NC}"
        local running=0
        local total=0
        for server in $(list_servers); do
            check_server_status "$server" && ((running++))
            ((total++))
        done
        echo "${BLUE}📊 總結：${GREEN}$running${NC}/${total} 個服務器正在運行${NC}"
        ;;
    start)
        check_config || exit 1
        check_environment || exit 1
        if [[ -n "$2" ]]; then
            start_server "$2"
        else
            echo "${BLUE}🚀 啟動所有服務器...${NC}"
            for server in $(list_servers); do
                start_server "$server"
            done
        fi
        ;;
    stop)
        check_config || exit 1
        if [[ -n "$2" ]]; then
            stop_server "$2"
        else
            echo "${YELLOW}🛑 停止所有服務器...${NC}"
            for server in $(list_servers); do
                stop_server "$server"
            done
        fi
        ;;
    restart)
        check_config || exit 1
        check_environment || exit 1
        if [[ -n "$2" ]]; then
            stop_server "$2"
            sleep 2
            start_server "$2"
        else
            echo "${BLUE}🔄 重啟所有服務器...${NC}"
            for server in $(list_servers); do
                stop_server "$server"
            done
            sleep 2
            for server in $(list_servers); do
                start_server "$server"
            done
        fi
        ;;
    doctor)
        check_config || exit 1
        echo "${BLUE}🏥 執行系統診斷...${NC}"
        check_environment
        echo "${BLUE}📦 檢查已安裝的套件...${NC}"
        for server in $(list_servers); do
            local command=$(get_server_info "$server" "command")
            if [[ -f $(echo "$command" | cut -d' ' -f2) ]]; then
                echo "${GREEN}✅ $(get_server_info "$server" "description") 已安裝${NC}"
            else
                echo "${RED}❌ $(get_server_info "$server" "description") 未安裝${NC}"
            fi
        done
        ;;
    reload)
        echo "${BLUE}🔄 重新載入配置...${NC}"
        if [[ -f "$SERVERS_CONF" ]]; then
            echo "${GREEN}✅ 配置已重新載入${NC}"
        else
            echo "${RED}❌ 找不到配置文件${NC}"
        fi
        ;;
    *)
        echo "${RED}錯誤：未知命令 '$1'${NC}"
        echo "使用 'mcp help' 查看可用命令"
        exit 1
        ;;
esac 